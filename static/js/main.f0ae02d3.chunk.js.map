{"version":3,"sources":["Context/UserContext.js","Pages/Home.js","Pages/Signin.js","Pages/Signup.js","Pages/PageNotFound.js","App.js","Config/FConfig.js","serviceWorker.js","index.js"],"names":["UserContext","createContext","Home","context","useContext","useState","ins","setIns","fetchInsult","a","Axios","get","data","insult","useEffect","user","uid","Container","fluid","Row","Col","md","className","id","Button","onClick","block","color","setUser","outline","to","Signin","email","setEmail","password","setPassword","handleSubmit","e","preventDefault","alert","firebase","auth","signInWithEmailAndPassword","then","res","toast","type","catch","error","message","Form","onSubmit","Label","for","Input","name","placeholder","value","onChange","target","tag","Link","Signup","createUserWithEmailAndPassword","lg","PageNotFound","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","App","basename","process","Provider","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.f0ae02d3.chunk.js","sourcesContent":["import { createContext } from \"react\";\r\n\r\nexport const UserContext = createContext();\r\n","import React, { useState, useEffect, useContext } from \"react\";\r\nimport Axios from \"axios\";\r\nimport { Container, Row, Col, Button } from \"reactstrap\";\r\nimport { UserContext } from \"../Context/UserContext\";\r\nimport { Redirect } from \"react-router-dom\";\r\n\r\nconst Home = () => {\r\n  const context = useContext(UserContext);\r\n  const [ins, setIns] = useState(\"Thinking...ðŸ¤”\");\r\n\r\n  const fetchInsult = async () => {\r\n    const { data } = await Axios.get(\r\n      \"https://cors-anywhere.herokuapp.com/https://evilinsult.com/generate_insult.php?lang=en&type=json\"\r\n    );\r\n    setIns(data.insult);\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetchInsult();\r\n  }, []);\r\n\r\n  const oneMore = () => {\r\n    setIns(\"Thinking...ðŸ¤”\");\r\n    fetchInsult();\r\n  };\r\n\r\n  const logout = () => {\r\n    context.setUser(null);\r\n  };\r\n\r\n  if (!context.user?.uid) {\r\n    return <Redirect to=\"signin\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col md={6} className=\"offset-md-3\">\r\n          <div id=\"insultCard\">\r\n            <h1 className=\"display-4 text-center pt-2 pb-4\">\r\n              Don't mind but..\r\n            </h1>\r\n            <h3 className=\"text-center\">{ins}</h3>\r\n            <Button onClick={oneMore} className=\"mb-3\" block color=\"dark\">\r\n              One More\r\n            </Button>\r\n            <Button\r\n              onClick={logout}\r\n              outline\r\n              className=\"mb-3\"\r\n              block\r\n              color=\"dark\"\r\n            >\r\n              Logout\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Home;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Container, Row, Label, Col, Button, Form, Input } from \"reactstrap\";\r\nimport { UserContext } from \"../Context/UserContext\";\r\nimport firebase from \"firebase/app\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\n\r\nconst Signin = () => {\r\n  const context = useContext(UserContext);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleSign = () => {\r\n    firebase\r\n      .auth()\r\n      .signInWithEmailAndPassword(email, password)\r\n      .then((res) => {\r\n        context.setUser({ email: res.user.email, uid: res.user.uid });\r\n        toast(\"Get ready to be insulted\", {\r\n          type: \"default\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        toast(error.message, {\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    alert(\r\n      \"Disclaimer: We hope, you are adult and mature enough to understand sarcasm! ðŸ˜‰\"\r\n    );\r\n    handleSign();\r\n  };\r\n\r\n  if (context.user?.uid) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col md={4} className=\"m-auto\">\r\n          <div id=\"formCard\">\r\n            <h1 className=\"display-4 text-center pt-2 pb-4\">Insulting Room</h1>\r\n            <Form onSubmit={handleSubmit}>\r\n              <Label for=\"email\">Email</Label>\r\n              <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"Fake@email.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <Label for=\"password\">Password</Label>\r\n              <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Random password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button\r\n                onClick={handleSubmit}\r\n                block\r\n                className=\"mt-3\"\r\n                color=\"dark\"\r\n              >\r\n                Sign In\r\n              </Button>\r\n            </Form>\r\n            <Button\r\n              tag={Link}\r\n              to=\"/signup\"\r\n              outline\r\n              block\r\n              className=\"mt-3\"\r\n              color=\"dark\"\r\n            >\r\n              New here? Sign Up\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Signin;\r\n","import React, { useContext, useState } from \"react\";\r\nimport { Container, Row, Label, Col, Button, Form, Input } from \"reactstrap\";\r\nimport { UserContext } from \"../Context/UserContext\";\r\nimport firebase from \"firebase/app\";\r\nimport { toast } from \"react-toastify\";\r\nimport { Redirect, Link } from \"react-router-dom\";\r\n\r\nconst Signup = () => {\r\n  const context = useContext(UserContext);\r\n\r\n  const [email, setEmail] = useState(\"\");\r\n  const [password, setPassword] = useState(\"\");\r\n\r\n  const handleSign = () => {\r\n    firebase\r\n      .auth()\r\n      .createUserWithEmailAndPassword(email, password)\r\n      .then((res) => {\r\n        context.setUser({ email: res.user.email, uid: res.user.uid });\r\n        toast(\"Get ready to be insulted\", {\r\n          type: \"default\",\r\n        });\r\n      })\r\n      .catch((error) => {\r\n        toast(error.message, {\r\n          type: \"error\",\r\n        });\r\n      });\r\n  };\r\n\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    alert(\r\n      \"Disclaimer: We hope, you are adult and mature enough to understand sarcasm! ðŸ˜‰\"\r\n    );\r\n    handleSign();\r\n  };\r\n\r\n  if (context.user?.uid) {\r\n    return <Redirect to=\"/\" />;\r\n  }\r\n\r\n  return (\r\n    <Container fluid>\r\n      <Row>\r\n        <Col lg={4} className=\"m-auto\">\r\n          <div id=\"formCard\">\r\n            <h1 className=\"display-4 text-center pt-2 pb-4\">Insulting Room</h1>\r\n            <Form onSubmit={handleSubmit}>\r\n              <Label for=\"email\">Email</Label>\r\n              <Input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                id=\"email\"\r\n                placeholder=\"Fake@email.com\"\r\n                value={email}\r\n                onChange={(e) => setEmail(e.target.value)}\r\n              />\r\n              <Label for=\"password\">Password</Label>\r\n              <Input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                id=\"password\"\r\n                placeholder=\"Random password\"\r\n                value={password}\r\n                onChange={(e) => setPassword(e.target.value)}\r\n              />\r\n              <Button\r\n                onClick={handleSubmit}\r\n                block\r\n                className=\"mt-3\"\r\n                color=\"dark\"\r\n              >\r\n                Sign Up\r\n              </Button>\r\n            </Form>\r\n            <Button\r\n              tag={Link}\r\n              to=\"/signin\"\r\n              outline\r\n              block\r\n              className=\"mt-3\"\r\n              color=\"dark\"\r\n            >\r\n              Already a member? Sign In\r\n            </Button>\r\n          </div>\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default Signup;\r\n","import React from \"react\";\r\n\r\nconst PageNotFound = () => {\r\n  return (\r\n    <>\r\n      <h1 className=\"text center text-white\">404</h1>\r\n      <h3 className=\"text center text-white\">Page Not Found</h3>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default PageNotFound;\r\n","import React, { useState } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport \"./App.css\";\n\n//Toastify\nimport { ToastContainer } from \"react-toastify\";\nimport \"react-toastify/dist/ReactToastify.min.css\";\n\n//Router\nimport { BrowserRouter as Router, Switch, Route } from \"react-router-dom\";\n\n//Firebase\nimport firebase from \"firebase/app\";\nimport \"firebase/auth\";\n\nimport { UserContext } from \"./Context/UserContext\";\nimport Home from \"./Pages/Home\";\nimport Signin from \"./Pages/Signin\";\nimport Signup from \"./Pages/Signup\";\nimport PageNotFound from \"./Pages/PageNotFound\";\nimport Config from \"./Config/FConfig\";\n\n//Init Firebase\nfirebase.initializeApp(Config);\n\nfunction App() {\n  const [user, setUser] = useState(null);\n\n  return (\n    <Router basename={process.env.PUBLIC_URL}>\n      <UserContext.Provider value={{ user, setUser }}>\n        <ToastContainer />\n        <Switch>\n          <Route exact path=\"/\" component={Home} />\n          <Route exact path=\"/signin\" component={Signin} />\n          <Route exact path=\"/signup\" component={Signup} />\n          <Route exact path=\"*\" component={PageNotFound} />\n        </Switch>\n      </UserContext.Provider>\n    </Router>\n  );\n}\n\nexport default App;\n","export default {\r\n  apiKey: \"AIzaSyAoTVSOo-4AdT2r-SyhHoww6gS2Z9XRufw\",\r\n  authDomain: \"fire-git-67405.firebaseapp.com\",\r\n  databaseURL: \"https://fire-git-67405.firebaseio.com\",\r\n  projectId: \"fire-git-67405\",\r\n  storageBucket: \"fire-git-67405.appspot.com\",\r\n  messagingSenderId: \"1034272066487\",\r\n  appId: \"1:1034272066487:web:192bc4d053e2fc141cb632\",\r\n  measurementId: \"G-BHBX2EFSWK\",\r\n};\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}